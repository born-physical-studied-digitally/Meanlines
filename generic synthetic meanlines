import numpy as np
import matplotlib.pyplot as plt
import random                      
from scipy.signal import butter, filtfilt

# --------------------------------------------------------------------
def add_high_frequency_noise(data, sampling_rate, noise_level=0.1, cutoff_freq=5.0):
    """
    Adds high-frequency noise to the input data.
    """
    noise = np.random.normal(0, noise_level, len(data))

    nyquist = 0.5 * sampling_rate
    normal_cutoff = cutoff_freq / nyquist
    b, a = butter(4, normal_cutoff, btype='low', analog=False)

    high_freq_noise = filtfilt(b, a, noise)
    return data + high_freq_noise
# --------------------------------------------------------------------

x = np.linspace(-1, 31, 1000)
dt = x[1] - x[0]                       
sampling_rate = 1.0 / dt               

numlines = 15
y_total = []

for i in range(numlines):

    if i in [9,10,11]: continue # comment this to remove gap!
    
    # randomize frequencies and amplitudes
    min_freq = 0.1
    max_freq = 3.
    freqs = [random.uniform(min_freq, max_freq) for _ in range(4)]
    
    y0 = random.uniform(0.01, 0.05) * np.cos(freqs[0] * np.pi * x + np.pi/3)
    y1 = random.uniform(0.01, 0.05) * np.sin(freqs[1] * np.pi * x)
    y2 = random.uniform(0.01, 0.05) * np.sin(freqs[2] * x + np.pi/4)
    y3 = random.uniform(0.01, 0.05) * np.cos(freqs[3] * np.pi * x + np.pi/2)
    y4 = (-0.02 * x + 0.01) # now this is inside the loop, but does not matter

    y_equiv = y0 + y1 + y2 + y3 + y4

    # Add filtered noise
    y_equiv = add_high_frequency_noise(
        y_equiv,
        sampling_rate,
        noise_level=0.1,
        cutoff_freq=5.
    )

    y_total.append(y_equiv)
    plt.plot(x, y_equiv + i, linewidth=0.8, color="black")

#for i in range(numlines):
    #plt.axhline(i, color='gray', linestyle='--', linewidth=0.2)

plt.xlabel("Time (s)")
plt.ylabel("Lines")
plt.xlim(0,30)     # notice I changed this to mimic the seismogram paper which has no blank edges.
plt.tight_layout()
plt.show()
